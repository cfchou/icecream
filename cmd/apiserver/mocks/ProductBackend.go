// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "bitbucket.org/cfchou/icecream/pkg/backend/model"

// ProductBackend is an autogenerated mock type for the ProductBackend type
type ProductBackend struct {
	mock.Mock
}

// Create provides a mock function with given fields: product
func (_m *ProductBackend) Create(product *model.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: productID
func (_m *ProductBackend) Delete(productID string) error {
	ret := _m.Called(productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: productID
func (_m *ProductBackend) Read(productID string) (*model.Product, error) {
	ret := _m.Called(productID)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(string) *model.Product); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMany provides a mock function with given fields: cursor, limit
func (_m *ProductBackend) ReadMany(cursor string, limit int) (*model.Products, error) {
	ret := _m.Called(cursor, limit)

	var r0 *model.Products
	if rf, ok := ret.Get(0).(func(string, int) *model.Products); ok {
		r0 = rf(cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Products)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(cursor, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: product
func (_m *ProductBackend) Update(product *model.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: product
func (_m *ProductBackend) Upsert(product *model.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
